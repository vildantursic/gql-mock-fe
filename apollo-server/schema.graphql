# Included scalars
scalar JSON

# It will increment!
type Counter {
  # Number of increments
  count: Int!
  # Full meetup for testing
  countStr: String
}

# A text meetup send by users
type Meetup {
  _id: String!
  # Message content
  title: String!
  description: String!
}

# Input from user to create a meetup
input MeetupInput {
  # Message content
  title: String!
  description: String!
}

type User {
  _id: String!
  # Message content
  name: String!
  surname: String!
  age: Int!
}

input UserInput {
  # Message content
  name: String!
  surname: String!
  age: Int!
}

type Vote {
  _id: String!
  # Message content
  status: Boolean!
}

type Votes {
  left: Int!
  right: Int!
}

type VotesCleared {
  status: Boolean!
}

input VoteInput {
  # Message content
  status: Boolean!
}

type Query {
  # List of meetups sent by users
  meetups: [Meetup]
  users: [User]
}

type Mutation {
  myMutation: String!
  # Add a meetup and publish it on 'meetups' subscription channel
  addMeetup (input: MeetupInput!): Meetup!
  addUser (input: UserInput!): User!
}

type Subscription {
  mySub: String!
  # This will update every 2 seconds
  counter: Counter!
  # When a new meetup is added
  meetupAdded: Meetup!
  userAdded: User!
  votesCleared: VotesCleared!
}
